---
- name: Create VPC and EC2
  hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - vars.yml

  tasks:

  #-------- Deploy VPC ----------

    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr_block }}"
        region: "{{ region }}"
        dns_hostnames: yes
        dns_support: yes
        multi_ok: no
        tags:
          Name: "{{ vpc_name }}"
        state: present
      register: vpc

    - name: Add VPC ID to vars.yml
      ansible.builtin.lineinfile:
        path: ./vars.yml
        regexp: 'vpc_id: '
        line: 'vpc_id: {{vpc.vpc.id}}'
        state: present
        create: True

    - name: Create Subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr_block }}"
        region: "{{ region }}"
        az: "{{ region }}a"
        state: present
        wait: yes
      register: subnet
      with_items:
          - {subnet_name: "{{vpc_name}}_public"}

    - name: Add Subnet ID to vars.yml
      ansible.builtin.lineinfile:
        path: ./vars.yml
        regexp: 'subnet_id: '
        line: 'subnet_id: {{subnet.results[0].subnet.id}}'
        state: present
        create: True

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "{{ vpc_name }}_IGW"
        state: present
      register: igw

    - name: Create Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: "{{ vpc_name }}_RT"
        region: "{{region}}"
        subnets:
          - "{{subnet.results[0].subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igw.gateway_id}}"
        state: present
      register: rt

    #-------- Deploy Server ----------

    - name: Create security group
      amazon.aws.ec2_group:
        name: "{{ security_group_name }}"
        description: "My security group"
        vpc_id: "{{vpc.vpc.id}}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
            - 80
            - 22
            cidr_ip: 0.0.0.0/0
        state: present
      register: sg

    - name: Add SG ID to vars.yml
      ansible.builtin.lineinfile:
        path: ./vars.yml
        regexp: 'sg_id: '
        line: 'sg_id: {{sg.group_id}}'
        state: present
        create: True

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        region: "{{ region }}"
        tags:
          Name: "{{server_name}}"
          Environment: "{{env}}"
        exact_count: 1
        wait_timeout: 300 
        security_group: "{{ sg_id }}"
        vpc_subnet_id: "{{ subnet_id }}"
        network: 
          assign_public_ip: yes
        state: running
        wait: yes
      register: ec2

    - name: Add EC2 ID to vars.yml
      ansible.builtin.lineinfile:
        path: ./vars.yml
        regexp: 'ec2_id: '
        line: 'ec2_id: {{ec2.instance_ids[0]}}'
        state: present
        create: True
    
    - name: Get ip of EC2
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{server_name}}"
          instance-state-name: ["running"]
      register: ec2_info
    
    - name: Add EC2 IP to vars.yml
      ansible.builtin.lineinfile:
        path: ./vars.yml
        regexp: 'ec2_ip: '
        line: 'ec2_ip: {{ec2.instances[0].public_ip_address}}'
        state: present
        create: True

    - name: Wait for SSH
      wait_for:
        host: "{{ec2_ip}}"
        port: 22
        timeout: 300
    
    - name: Add EC2 instance to inventory
      add_host:
        name: "{{ ec2_ip }}"
        groups: ec2_hosts
          
#-------- Installations ----------
- name: Installations
  hosts: ec2_hosts
  user: ec2-user
  become: yes
  gather_facts: no
  vars_files:
    - vars.yml
  vars:
    ansible_host_key_checking: false
    ansible_ssh_private_key_file: "{{ private_key_path }}"

  tasks:
    - name: Install dependencies
      yum:
        name:
          - amazon-linux-extras
          - docker
          - git
        state: present

    - name: Create Docker group if it does not exist
      group:
        name: docker
        state: present

    - name: Add EC2 user to Docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Start docker
      service: 
        name: docker
        state: started
        enabled: yes

    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Clone Git repository
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ git_repo_dest }}"
        version: main
        force: yes

    - name: Docker compose up
      shell: |
        /usr/local/bin/docker-compose up -d
      args:
        chdir: "{{ git_repo_dest }}"

    - name: Print docker compose output
      debug:
        msg: "app is running on http://{{ec2_ip}}"

